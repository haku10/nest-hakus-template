# https://taskfile.dev

version: '3'

dotenv:
  - .env

tasks:
  default:
    cmds:
      - task -l

  # ----- 初期化関連コマンド
  init:
    desc: "環境初期化(何度でも実行可能 - 環境を壊してしまった場合、本コマンドの再実行で修復可能)"
    cmds:
      # 依存のインストール
      - brew install jq
      # playground.nnbの作成
      - task: write-playground
      # クリーン
      - task: clean
      # 環境をdbボリューム含め消去
      - docker-compose down -v
      - docker-compose --profile schemaspy down -v
      # seed可能になるまで時間がかかるのでdbを先にwarmup
      - docker-compose up -d db
      # コンテナイメージ構築
      - docker-compose build
      # ローカルnode_modulesの作成(VSCode用)
      - npm install
      # seed
      - echo waiting for db to be ready...
      - sleep 40

  clean:
    desc: "自動生成されたファイル・フォルダを削除 (Linux開発者が権限エラーになるためsudoをつけている)"
    cmds:
      - rm -rf dist node_modules prisma/client

  # ----- 起動コマンド

  up-backend:
    desc: "バックエンドサーバーを起動"
    cmds:
      - task: db-apply
      - docker-compose up --build backend

  # ----- DB関連コマンド

  db-apply:
    desc: "prismaスキーマからコード生成&状態をDBに反映: 開発効率重視のため、本番環境への初回リリースまではこちらのコマンドのみを使用する"
    cmds:
      - docker-compose run --rm backend prisma db push

  gen-db-schema:
    desc: "schemaspyでDBスキーマを生成"
    cmds:
      - docker-compose up schemaspy

  # ----- 内部呼び出しコマンド (ユーザーが直叩かない)

  write-playground:
    desc: "(内部用) playground.nnbファイルを作成する"
    internal: true
    cmds:
      - |
        FILE="playground.nnb"
        if [ ! -f "$FILE" ]; then
            cat << EOF > "$FILE"
        {"cells": [{"language": "typescript", "source": ["console.log(JSON.stringify({}))"], "outputs": [{"items": [{"mime": "application/vnd.code.notebook.stdout", "value": ["{}", ""]}]}]}]}
        EOF
        fi
